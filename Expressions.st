TestCase subclass: #EAdditionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EAdditionTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 19:00'!testPrinting self 	assert: EAddition fivePlusThree printString 	equals: '( 5 + 3 )'.self 	assert: EAddition fivePlusThree negated printString 	equals: '- ( 5 + 3 )'! !!EAdditionTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testNegated	| ep1 ep2 |	ep1 := EConstant constant5.	ep2 := EConstant constant3.	self		assert: ((EAddition new				  right: ep1;				  left: ep2) negated evaluateWith: Dictionary new)		equals: -8! !!EAdditionTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testEvaluate	| ep1 ep2 |	ep1 := EConstant new value: 5.	ep2 := EConstant new value: 3.	self		assert: ((EAddition new				  right: ep1;				  left: ep2) evaluateWith: Dictionary new)		equals: 8! !!EAdditionTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testEvaluateWithNegation	| ep1 ep2 |	ep1 := ENegation new expression: (EConstant new value: 5).	ep2 := EConstant new value: 3.	self		assert: ((EAddition new				  right: ep1;				  left: ep2) evaluateWith: Dictionary new)		equals: -2! !!EAdditionTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testEvaluateWithClassCreationMessage	| ep1 ep2 |	ep1 := EConstant value: 5.	ep2 := EConstant value: 3.	self		assert:		((EAddition left: ep1 right: ep2) evaluateWith: Dictionary new)		equals: 8! !TestCase subclass: #EConstantTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EConstantTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testCreationWithClassCreationMessage	self		assert: ((EConstant value: 5) evaluateWith: Dictionary new)		equals: 5! !!EConstantTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 18:39'!testPrinting self assert: (EConstant value: 5) printString equals: '5'! !!EConstantTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testEvaluate	self		assert: ((EConstant new value: 5) evaluateWith: Dictionary new)		equals: 5! !!EConstantTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testNegated	self		assert:		((EConstant new value: 6) negated evaluateWith: Dictionary new)		equals: -6! !Object subclass: #EEvaluatorVisitor	instanceVariableNames: 'bindings'	classVariableNames: ''	package: 'Expressions'!!EEvaluatorVisitor methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 23:43'!bindings: aDictionary bindings:= aDictionary! !!EEvaluatorVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 19:38'!visitNegation: anENegation|c|c :=  anENegation expression accept: EEvaluatorVisitor new.^(c evaluateWith: self) negated! !!EEvaluatorVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 17:30'!visitConstant: aConstant^ aConstant value! !!EEvaluatorVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:55'!visitAddition: anEAddition|l r|l :=  anEAddition left accept: EEvaluatorVisitor new.r :=  anEAddition  right accept: EEvaluatorVisitor new.^(l value) + (r value)! !!EEvaluatorVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:24'!visitVariable: aVariable^self bindings at:(aVariable id)! !!EEvaluatorVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:23'!visitDivision: anEDivision|denominator error|denominator:=anEDivision denominator accept: self.error:=EZeroDenominator new.denominator=0 ifTrue: [ error signal "Le num√©rateur vaut 0" ].^(anEDivision numerator accept:self) / denominator! !!EEvaluatorVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:23'!visitMultiplication: anEMultiplication|l r|l :=  anEMultiplication  left accept: EEvaluatorVisitor new.r :=  anEMultiplication  right accept: EEvaluatorVisitor new.^(l * r)! !!EEvaluatorVisitor methodsFor: 'initialization' stamp: 'MounirGuerrab 11/12/2022 23:41'!at: anId put: aValuebindings at: anId put: aValue! !!EEvaluatorVisitor methodsFor: 'initialization' stamp: 'MounirGuerrab 11/12/2022 23:40'!initialize super initialize. bindings := Dictionary new ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EEvaluatorVisitor class	instanceVariableNames: ''!!EEvaluatorVisitor class methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 23:41'!id: anId^self new id: anId; yourself! !TestCase subclass: #EEvaluatorVisitorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EEvaluatorVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 22:12'!testVisitDivisonByZeroThrowsException| expression result| expression := EDivision 	numerator: (EConstant value:6)	denominator: (EConstant value: 0).selfshould: [ expression accept: EEvaluatorVisitor new ]raise: EZeroDenominator! !!EEvaluatorVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 22:08'!testVisitMultiplicationReturnsMultiplicationResult| expression result| expression := EMultiplication 	left: (EConstant value:7)	right: (EConstant value: -2).result := expression accept: EEvaluatorVisitor new.self assert: result equals: -14! !!EEvaluatorVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 19:32'!testVisitNegationReturnsNegatedConstant | expression result| expression:= (EConstant value:7) negated.result := expression accept: EEvaluatorVisitor new.self assert: result equals: -7! !!EEvaluatorVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 18:35'!testVisitConstantReturnsConstantValue| constant result |constant := EConstant value: 5.result := constant accept: EEvaluatorVisitor new.self assert: result equals: 5.! !!EEvaluatorVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 23:29'!testVisitDivisonReturnsDivisionResult| expression result| expression := EDivision 	numerator: (EConstant value:6)	denominator:(EConstant value: 3).result := expression accept: EEvaluatorVisitor new.self assert: result equals: 2! !!EEvaluatorVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 18:27'!testVisitAdditionReturnsAdditionResult| expression result| expression := EAddition 	left: (EConstant value:7)	right: (EConstant value: -2).result := expression accept: EEvaluatorVisitor new.self assert: result equals: 5! !Object subclass: #EExpression	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EExpression methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 18:08'!negated ^ENegation new expression: self! !!EExpression methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 23:43'!evaluateWith: anEnvironment|visitor|visitor := EEvaluatorVisitor new.visitor bindings: anEnvironment.^self accept: visitor.! !!EExpression methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 21:51'!accept: aVisitorself subclassResponsibility ! !EExpression subclass: #EBinaryExpression	instanceVariableNames: 'left right'	classVariableNames: ''	package: 'Expressions'!!EBinaryExpression methodsFor: 'printing' stamp: 'MounirGuerrab 11/11/2022 21:18'!operatorString ^ ' + '! !!EBinaryExpression methodsFor: 'printing' stamp: 'MounirGuerrab 11/11/2022 21:18'!printOn: aStream aStream nextPutAll: '( '.left printOn: aStream.aStream nextPutAll: self operatorString.right printOn: aStream.aStream nextPutAll: ' )'! !!EBinaryExpression methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 19:33'!right: anExpression right:= anExpression ! !!EBinaryExpression methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 19:33'!left: anExpression left:= anExpression ! !!EBinaryExpression methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 18:27'!right ^right! !!EBinaryExpression methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 18:27'!left^left! !EBinaryExpression subclass: #EAddition	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EAddition methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 18:25'!accept: aVisitor^ aVisitor visitAddition: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EAddition class	instanceVariableNames: ''!!EAddition class methodsFor: 'instance creation' stamp: 'MounirGuerrab 11/11/2022 18:23'!left: anEExpression right: anEExpression2^self new left: anEExpression ; right: anEExpression2 ! !!EAddition class methodsFor: 'as yet unclassified' stamp: 'MounirGuerrab 11/11/2022 18:34'!fivePlusThree <sampleInstance> |ep1 ep2|ep1 := EConstant new value: 5.ep2 := EConstant new value: 3.^self new left: ep1; right: ep2! !EExpression subclass: #EConstant	instanceVariableNames: 'value'	classVariableNames: ''	package: 'Expressions'!!EConstant methodsFor: 'printing' stamp: 'MounirGuerrab 11/11/2022 18:40'!printOn: aStream aStream nextPutAll: value printString! !!EConstant methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 17:26'!value: anIntegervalue := anInteger ! !!EConstant methodsFor: 'visiting' stamp: 'MounirGuerrab 11/11/2022 21:52'!accept: aVisitor^ aVisitor visitConstant: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EConstant class	instanceVariableNames: ''!!EConstant class methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 18:19'!value: anInteger ^ self new value: anInteger ! !!EConstant class methodsFor: 'as yet unclassified' stamp: 'MounirGuerrab 11/11/2022 18:31'!constant3 <sampleInstance> ^self new value: 3! !!EConstant class methodsFor: 'as yet unclassified' stamp: 'MounirGuerrab 11/11/2022 18:32'!constant5 <sampleInstance> ^self new value: 5! !EBinaryExpression subclass: #EDivision	instanceVariableNames: 'numerator denominator'	classVariableNames: ''	package: 'Expressions'!!EDivision methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 23:32'!numerator:aNumeratorExpression numerator:=aNumeratorExpression! !!EDivision methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 23:32'!denominator: aDenominatorExpression denominator := aDenominatorExpression ! !!EDivision methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 22:15'!numerator ^numerator! !!EDivision methodsFor: 'accessing' stamp: 'MounirGuerrab 11/12/2022 22:15'!denominator ^denominator! !!EDivision methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 22:15'!accept: aVisitor^ aVisitor visitDivision: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EDivision class	instanceVariableNames: ''!!EDivision class methodsFor: 'instance creation' stamp: 'MounirGuerrab 11/12/2022 22:14'!numerator: aNumeratorExpression denominator: aDenominatorExpression^ self new numerator: aNumeratorExpression;denominator: aDenominatorExpression;yourself 	! !EBinaryExpression subclass: #EMultiplication	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EMultiplication methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 22:08'!accept: aVisitor^ aVisitor visitMultiplication: self! !!EMultiplication methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 21:19'!operatorString ^' * '! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EMultiplication class	instanceVariableNames: ''!!EMultiplication class methodsFor: 'as yet unclassified' stamp: 'MounirGuerrab 11/11/2022 18:35'!fiveTimesThree <sampleInstance> |ep1 ep2|ep1 := EConstant constant5.ep2 := EConstant constant3.^ EMultiplication new left: ep1 ; right: ep2! !!EMultiplication class methodsFor: 'instance creation' stamp: 'MounirGuerrab 11/11/2022 18:26'!left: anEExpression right: anEExpression2^self new left: anEExpression; right: anEExpression2 ! !TestCase subclass: #EMultiplicationTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EMultiplicationTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testEvaluateWithClassCreationMessage	| ep1 ep2 |	ep1 := EConstant value: 5.	ep2 := EConstant value: 3.	self		assert:		((EMultiplication left: ep1 right: ep2) evaluateWith: Dictionary new)		equals: 15! !!EMultiplicationTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 19:00'!testPrinting self 	assert: EMultiplication fiveTimesThree negated printString 	equals: '- ( 5 * 3 )'! !!EMultiplicationTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testEvaluateNegated	| ep1 ep2 |	ep1 := EConstant new value: 5.	ep2 := EConstant new value: 3.	self		assert: ((EMultiplication new				  right: ep1;				  left: ep2) negated evaluateWith: Dictionary new)		equals: -15! !!EMultiplicationTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testEvaluate	| ep1 ep2 |	ep1 := EConstant new value: 5.	ep2 := EConstant new value: 3.	self		assert: ((EMultiplication new				  right: ep1;				  left: ep2) evaluateWith: Dictionary new)		equals: 15! !EExpression subclass: #ENegation	instanceVariableNames: 'expression'	classVariableNames: ''	package: 'Expressions'!!ENegation methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 19:33'!expression ^expression! !!ENegation methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 19:33'!accept: aVisitor^ aVisitor visitNegation: self! !!ENegation methodsFor: 'arithmetic' stamp: 'MounirGuerrab 11/11/2022 19:31'!negated ^expression! !!ENegation methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 17:31'!expression: anExpression expression := anExpression ! !!ENegation methodsFor: 'printing' stamp: 'MounirGuerrab 11/12/2022 19:35'!printOn: aStream aStream nextPutAll: '-'.expression printOn: aStream! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ENegation class	instanceVariableNames: ''!!ENegation class methodsFor: 'instance creation' stamp: 'MounirGuerrab 11/11/2022 18:21'!expression: anExpression ^self new expression: anExpression ! !TestCase subclass: #ENegationTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!ENegationTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 19:31'!testNegatedStructureIsCorrect|exp| exp := EConstant constant5.self assert: exp negated class = ENegation.self assert: exp negated negated equals: exp.! !!ENegationTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 18:36'!testEvaluateWithClassCreationMessage	self		assert: ((ENegation expression: (EConstant value: 5)) evaluateWith:				 Dictionary new)		equals:  -5! !!ENegationTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testNegationNegated	self		assert:		((EConstant new value: 6) negated negated evaluateWith:			 Dictionary new)		equals: 6! !!ENegationTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:40'!testEvaluate	self		assert:			((ENegation new expression: (EConstant new value: 5)) 				 evaluateWith: Dictionary new)		equals: -5! !Object subclass: #EPrinterVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EPrinterVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:47'!visitNegation: aNegation ^ '(', (aNegation accept:EEvaluatorVisitor new) asString , ')'! !!EPrinterVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:44'!visitConstant: aConstant ^aConstant value asString! !!EPrinterVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:47'!visitAddition: anAddition | left right|left  := anAddition left accept:self.right := anAddition right accept:self.^ '(', left , ' + ', right, ')'! !!EPrinterVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:47'!visitVariable: aVariable ^aVariable id asString! !!EPrinterVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:47'!visitDivision: aDivision | left right |left := aDivision numerator accept: self.right := aDivision denominator accept: self.^ '(', left , ' / ', right, ')'! !!EPrinterVisitor methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:46'!visitMultiplication: aMultiplication|l r|l := aMultiplication left accept: self.r := aMultiplication right accept: self.^ '(',l,'*',r,')'! !TestCase subclass: #EPrinterVisitorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EPrinterVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 23:50'!testPrintingNegation |cneg c v|c:=EConstant new value:5.cneg :=ENegation new expression: c.v:=EPrinterVisitor new.self assert: (v visitNegation:cneg) equals: '(-5)'.! !!EPrinterVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 23:48'!testPrintingAddition |visitor add|visitor:=EPrinterVisitor new.add:=EAddition fivePlusThree.self assert: (visitor visitAddition:add) equals: '(5 + 3)'.! !!EPrinterVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 23:49'!testPrintingDivision |div visitor|visitor:=EPrinterVisitor new.div:=EDivision numerator: (EConstant new value:3) denominator: (EConstant new value:4).self assert: (visitor visitDivision: div) equals: '(3 / 4)'! !!EPrinterVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 23:49'!testPrintingConstant |visitor fiveConstant|visitor:=EPrinterVisitor new.fiveConstant:=(EConstant value: 5).self assert: (visitor visitConstant: fiveConstant ) equals: '5'.self assert: (visitor visitConstant: fiveConstant negated ) equals: '-5'.! !!EPrinterVisitorTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/12/2022 23:49'!testPrintingMultiplication |visitor mul|visitor:=EPrinterVisitor new.mul:=EMultiplication fiveTimesThree.self assert: (visitor visitMultiplication: mul) equals: '(5*3)'.! !EExpression subclass: #EVariable	instanceVariableNames: 'id'	classVariableNames: ''	package: 'Expressions'!!EVariable methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 21:24'!evaluateWith: aBindingDictionary^ aBindingDictionary at: id! !!EVariable methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 21:23'!id: aSymbol id := aSymbol! !!EVariable methodsFor: 'accessing' stamp: 'MounirGuerrab 11/11/2022 21:24'!printOn: aStreamaStream nextPutAll: id asString! !!EVariable methodsFor: 'visiting' stamp: 'MounirGuerrab 11/12/2022 23:37'!accept: aVisitor^aVisitor visitVariable: self! !TestCase subclass: #EVariableTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EVariableTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:27'!testValueOfxInNegation self assert: ((EVariable new id: #x) negated 	evaluateWith: {#x -> 10} asDictionary) equals: -10! !!EVariableTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:26'!testValueOfxself 	assert: ((EVariable new id: #x) evaluateWith: {#x -> 10} asDictionary)	equals: 10.! !!EVariableTest methodsFor: 'tests' stamp: 'MounirGuerrab 11/11/2022 21:30'!testEvaluateXplusY |ep1 ep2 add|ep1 := EVariable new id: #x.ep2 := EVariable new id: #y.add := EAddition left: ep1 right:ep2.self 	assert: (add evaluateWith: { #x -> 10 . #y -> 2 }	asDictionary)	equals: 12.self	assert: (add evaluateWith: { #x -> 10 . #y -> 12 }	asDictionary)	equals: 22.! !EExpression subclass: #EZeroDenominator	instanceVariableNames: ''	classVariableNames: ''	package: 'Expressions'!!EZeroDenominator methodsFor: 'as yet unclassified' stamp: 'MounirGuerrab 11/12/2022 23:34'!zeroDenominator ^[EZeroDenominator signal: 'the denominator is 0'].! !